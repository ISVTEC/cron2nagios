#!/bin/bash
#
# Copyright (C) 2014 Cyril Bouthors <cyril@boutho.rs>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

set -e -o pipefail -o nounset

nsca_hostname=''
command=''
nagios_service_name=''
nagios_host_name=$(hostname -f)
return_code=0
tempfile=$(tempfile)
trap "rm -f $tempfile" EXIT HUP INT TRAP TERM

# Add /usr/sbin/ because send_nsca is there
export PATH=$PATH:/usr/sbin/

usage()
{
    echo "$0: Too few argument!" >&2
    echo "Usage: $0 --nsca-hostname=monitoring.isvtec.com --command='mycron foo' --nagios-service-name=service-name" >&2
    echo "  [--nagios-host-name=HOSTNAME]" >&2
}

# ":" means required
# "::" means optional
TEMP=$(getopt -o h: --long nsca-hostname:,command:,nagios-service-name: \
    --long nagios-host-name:: -n "$0" -- "$@")

# Check for non-GNU getopt
if [ $? != 0 ]
then
    usage
    exit 1
fi

# Parse options with getopt
eval set -- "$TEMP"
while true
do
    case "$1" in
	--nsca-hostname)
	    nsca_hostname="$2"
	    shift 2
	    ;;

	--command)
	    command="$2"
	    shift 2
	    ;;

	--nagios-service-name)
	    nagios_service_name="$2"
	    shift 2
	    ;;

	--nagios-host-name)
	    nagios_host_name="$2"
	    shift 2
	    ;;

	--)
	    shift
	    break
	    ;;

	*)
	    echo "$0: getopt error!" >&2
	    exit 1
	    ;;
    esac
done

if [ -z "$nsca_hostname" -o -z "$command" -o -z "$nagios_service_name" ]
then
    usage
    exit 1
fi

# Return critical if $command does not return true
if ! $command >$tempfile 2>&1
then
    return_code=2
fi

# Return critical if $command output anything. Commands are supposed to be
# quiet if everything is OK.
if [ $(wc -c < $tempfile) != 0 ]
then
    return_code=2
fi

status_information=$(tr "\n" . < $tempfile)

if [ -z "$status_information" ]
then
    status_information="no output"
fi

# Prepend command name to the status information
status_information="Command \"$command\": $status_information"

# We limit the message sent to 4kB because send_nsca segfaults with big
# messages. To reproduce: send_nsca -H localhost < /dev/zero
echo -e "$nagios_host_name\t$nagios_service_name\t$return_code\t$status_information" \
    | head -c 4000 \
    | send_nsca -H $nsca_hostname >/dev/null
